/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface NFTMarketInterface extends ethers.utils.Interface {
  functions: {
    "createMarketItem(address,uint256,uint256)": FunctionFragment;
    "createMarketSale(address,uint256)": FunctionFragment;
    "fetchMarketItem(uint256)": FunctionFragment;
    "fetchMarketItems()": FunctionFragment;
    "fetchMyNFTs()": FunctionFragment;
    "getMarketItem(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createMarketItem",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createMarketSale",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchMarketItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchMarketItems",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fetchMyNFTs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketItem",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createMarketItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMarketSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchMarketItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchMarketItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchMyNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketItem",
    data: BytesLike
  ): Result;

  events: {
    "MarketItemCreated(uint256,address,uint256,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MarketItemCreated"): EventFragment;
}

export class NFTMarket extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: NFTMarketInterface;

  functions: {
    createMarketItem(
      nftContract: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "createMarketItem(address,uint256,uint256)"(
      nftContract: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    createMarketSale(
      nftContract: string,
      itemId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "createMarketSale(address,uint256)"(
      nftContract: string,
      itemId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    fetchMarketItem(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, string, BigNumber, string, string, BigNumber] & {
          itemId: BigNumber;
          nftContract: string;
          tokenId: BigNumber;
          seller: string;
          owner: string;
          price: BigNumber;
        }
      ]
    >;

    "fetchMarketItem(uint256)"(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, string, BigNumber, string, string, BigNumber] & {
          itemId: BigNumber;
          nftContract: string;
          tokenId: BigNumber;
          seller: string;
          owner: string;
          price: BigNumber;
        }
      ]
    >;

    fetchMarketItems(
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, string, BigNumber, string, string, BigNumber] & {
          itemId: BigNumber;
          nftContract: string;
          tokenId: BigNumber;
          seller: string;
          owner: string;
          price: BigNumber;
        })[]
      ]
    >;

    "fetchMarketItems()"(
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, string, BigNumber, string, string, BigNumber] & {
          itemId: BigNumber;
          nftContract: string;
          tokenId: BigNumber;
          seller: string;
          owner: string;
          price: BigNumber;
        })[]
      ]
    >;

    fetchMyNFTs(
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, string, BigNumber, string, string, BigNumber] & {
          itemId: BigNumber;
          nftContract: string;
          tokenId: BigNumber;
          seller: string;
          owner: string;
          price: BigNumber;
        })[]
      ]
    >;

    "fetchMyNFTs()"(
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, string, BigNumber, string, string, BigNumber] & {
          itemId: BigNumber;
          nftContract: string;
          tokenId: BigNumber;
          seller: string;
          owner: string;
          price: BigNumber;
        })[]
      ]
    >;

    getMarketItem(
      marketItemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, string, BigNumber, string, string, BigNumber] & {
          itemId: BigNumber;
          nftContract: string;
          tokenId: BigNumber;
          seller: string;
          owner: string;
          price: BigNumber;
        }
      ]
    >;

    "getMarketItem(uint256)"(
      marketItemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, string, BigNumber, string, string, BigNumber] & {
          itemId: BigNumber;
          nftContract: string;
          tokenId: BigNumber;
          seller: string;
          owner: string;
          price: BigNumber;
        }
      ]
    >;
  };

  createMarketItem(
    nftContract: string,
    tokenId: BigNumberish,
    price: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "createMarketItem(address,uint256,uint256)"(
    nftContract: string,
    tokenId: BigNumberish,
    price: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  createMarketSale(
    nftContract: string,
    itemId: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "createMarketSale(address,uint256)"(
    nftContract: string,
    itemId: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  fetchMarketItem(
    itemId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, string, string, BigNumber] & {
      itemId: BigNumber;
      nftContract: string;
      tokenId: BigNumber;
      seller: string;
      owner: string;
      price: BigNumber;
    }
  >;

  "fetchMarketItem(uint256)"(
    itemId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, string, string, BigNumber] & {
      itemId: BigNumber;
      nftContract: string;
      tokenId: BigNumber;
      seller: string;
      owner: string;
      price: BigNumber;
    }
  >;

  fetchMarketItems(
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, string, BigNumber, string, string, BigNumber] & {
      itemId: BigNumber;
      nftContract: string;
      tokenId: BigNumber;
      seller: string;
      owner: string;
      price: BigNumber;
    })[]
  >;

  "fetchMarketItems()"(
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, string, BigNumber, string, string, BigNumber] & {
      itemId: BigNumber;
      nftContract: string;
      tokenId: BigNumber;
      seller: string;
      owner: string;
      price: BigNumber;
    })[]
  >;

  fetchMyNFTs(
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, string, BigNumber, string, string, BigNumber] & {
      itemId: BigNumber;
      nftContract: string;
      tokenId: BigNumber;
      seller: string;
      owner: string;
      price: BigNumber;
    })[]
  >;

  "fetchMyNFTs()"(
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, string, BigNumber, string, string, BigNumber] & {
      itemId: BigNumber;
      nftContract: string;
      tokenId: BigNumber;
      seller: string;
      owner: string;
      price: BigNumber;
    })[]
  >;

  getMarketItem(
    marketItemId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, string, string, BigNumber] & {
      itemId: BigNumber;
      nftContract: string;
      tokenId: BigNumber;
      seller: string;
      owner: string;
      price: BigNumber;
    }
  >;

  "getMarketItem(uint256)"(
    marketItemId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, string, string, BigNumber] & {
      itemId: BigNumber;
      nftContract: string;
      tokenId: BigNumber;
      seller: string;
      owner: string;
      price: BigNumber;
    }
  >;

  callStatic: {
    createMarketItem(
      nftContract: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "createMarketItem(address,uint256,uint256)"(
      nftContract: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createMarketSale(
      nftContract: string,
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "createMarketSale(address,uint256)"(
      nftContract: string,
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fetchMarketItem(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, string, string, BigNumber] & {
        itemId: BigNumber;
        nftContract: string;
        tokenId: BigNumber;
        seller: string;
        owner: string;
        price: BigNumber;
      }
    >;

    "fetchMarketItem(uint256)"(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, string, string, BigNumber] & {
        itemId: BigNumber;
        nftContract: string;
        tokenId: BigNumber;
        seller: string;
        owner: string;
        price: BigNumber;
      }
    >;

    fetchMarketItems(
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, string, BigNumber, string, string, BigNumber] & {
        itemId: BigNumber;
        nftContract: string;
        tokenId: BigNumber;
        seller: string;
        owner: string;
        price: BigNumber;
      })[]
    >;

    "fetchMarketItems()"(
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, string, BigNumber, string, string, BigNumber] & {
        itemId: BigNumber;
        nftContract: string;
        tokenId: BigNumber;
        seller: string;
        owner: string;
        price: BigNumber;
      })[]
    >;

    fetchMyNFTs(
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, string, BigNumber, string, string, BigNumber] & {
        itemId: BigNumber;
        nftContract: string;
        tokenId: BigNumber;
        seller: string;
        owner: string;
        price: BigNumber;
      })[]
    >;

    "fetchMyNFTs()"(
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, string, BigNumber, string, string, BigNumber] & {
        itemId: BigNumber;
        nftContract: string;
        tokenId: BigNumber;
        seller: string;
        owner: string;
        price: BigNumber;
      })[]
    >;

    getMarketItem(
      marketItemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, string, string, BigNumber] & {
        itemId: BigNumber;
        nftContract: string;
        tokenId: BigNumber;
        seller: string;
        owner: string;
        price: BigNumber;
      }
    >;

    "getMarketItem(uint256)"(
      marketItemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, string, string, BigNumber] & {
        itemId: BigNumber;
        nftContract: string;
        tokenId: BigNumber;
        seller: string;
        owner: string;
        price: BigNumber;
      }
    >;
  };

  filters: {
    MarketItemCreated(
      itemId: BigNumberish | null,
      nftContract: string | null,
      tokenId: BigNumberish | null,
      seller: null,
      owner: null,
      price: null
    ): EventFilter;
  };

  estimateGas: {
    createMarketItem(
      nftContract: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "createMarketItem(address,uint256,uint256)"(
      nftContract: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    createMarketSale(
      nftContract: string,
      itemId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "createMarketSale(address,uint256)"(
      nftContract: string,
      itemId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    fetchMarketItem(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "fetchMarketItem(uint256)"(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fetchMarketItems(overrides?: CallOverrides): Promise<BigNumber>;

    "fetchMarketItems()"(overrides?: CallOverrides): Promise<BigNumber>;

    fetchMyNFTs(overrides?: CallOverrides): Promise<BigNumber>;

    "fetchMyNFTs()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMarketItem(
      marketItemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarketItem(uint256)"(
      marketItemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createMarketItem(
      nftContract: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "createMarketItem(address,uint256,uint256)"(
      nftContract: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    createMarketSale(
      nftContract: string,
      itemId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "createMarketSale(address,uint256)"(
      nftContract: string,
      itemId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    fetchMarketItem(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "fetchMarketItem(uint256)"(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fetchMarketItems(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fetchMarketItems()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fetchMyNFTs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fetchMyNFTs()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMarketItem(
      marketItemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMarketItem(uint256)"(
      marketItemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
